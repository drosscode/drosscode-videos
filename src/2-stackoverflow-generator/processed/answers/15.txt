For errors, I&#39;m a big fan of logging A LOT. When things go wrong information is very valuable. I would keep the entire log in one place (text file or database table) with a session identifier to group relevant events together. 
I once worked for an agency that would not allow installation of anything that wasn&#39;t purely my own code or their (horrid) COM objects. If you have this type of limitation, then see if you can grab the source for log4net and include in your project. 

There is nothing better than log4net currently when it comes to logging.
Here&#39;s what I like to log:

  - error/debug level (info, debug, problem, crash, etc...)
  - time
  - descriptive text (usually one line)
  - stack trace (if possible)
  - data (user, session, variable values, etc...)

The simplest way is to write to a text file, but it can be nice to have it in a database.  You can also use the Windows event log.  Some things to watch out for.  Hmm... You&#39;ll need to clear out your logs periodically.

Funny story: one time we had an error logger that logged to the database, but we had bad database credentials which caused an error which was then logged...  Ended up getting stack overflows from the recursion (IIRC).
This might not be the exact answer you are looking for, but why develop your own error logging mechanism when there are powerful tools (which you mention) that handle all these key issues for you?

I can appreciate you are not allowed to install additional software but aren&#39;t logging libraries just classes like your custom code? Where is the fundamental difference? I would reckon the time spent worrying about implementing a logging framework might be better spent advocating and making a business case for a decent logging solution.
I personally took the following approach on logging erros (and only log errors) in an asp.net application:

  - use 
`
	protected void Application_Error(object sender, EventArgs e)
	{
		Server.Transfer(&quot;~/Support/ServerErrorSupport.aspx&quot;, true);
	}
`
(I do a `Server.Transfer` to preserve all post data.)

  - Generate an error ID which is unique for this error (so subsequent repports for the same error can be grouped). The ID is an hash calculated from a concatenated string consisting of: file, method, lineNr and error.Message. I get the file, method and lineNr values through a regex on the stacktrace.

  - I log all the following data to an xml structure (depending on the data type, I store the value differently, value types =&gt; ToString(), ISerializable =&gt; serialize, ...):
 1. MachineName: Application.Server.MachineName
 2. PhysicalRoot: Application.Server.MapPath(&quot;~/&quot;)
 3. RequestUrl: Application.Request.Url.ToString()
 4. ApplicationSettings: WebConfigurationManager.AppSettings
 5. ConnectionSettings: WebConfigurationManager.ConnectionStrings
 6. QueryString: Application.Request.QueryString
 7. FormPost: Application.Request.Form
 8. Session: Application.Session
 9. HttpHeaders: Application.Request.Headers

  - Save the xml structure as a local file containing the error ID and a timestamp.
I chose this approach because:
   - I can mail the rapport (xml-file) to myself (during test/debugging very easy)
   - store it locally or in a database during production
   - because the file is just a (dump to hd) save not much can go wrong during the creation of the error report (like a server connection, db problems, etc), just make sure you have write permissions.
   - Additionally on the servererrorsupport.aspx page, after saving the xml file, the user gets the option to include extra information and to add an emailaddress to keep updated on progress regarding the bug. This gets appended to the xml document.
   - I use an xslt file to format the error data (xml) in a nice error report.

