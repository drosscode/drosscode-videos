In my opinion code generators are a sign of bad design and violate DRY.  Where as a good framework will have you maintaining less code.  With frameworks you also end up extending and refactoring code rather than a code template.
 
I like a mixture of framework driven and manually written.  I&#39;ve done a little bit with NHibernate and LinqtoSql and sometimes the queries they generate for me need a little bit of help.
My experience with code generators is that they&#39;re a good start but after the changes have settled down I usually want to rewrite the modules by hand.  Of course, that can become a maintenance problem.  But it really turns into a &quot;how long is a piece of rope&quot; question.  *Which* generators, frameworks, and resources are you dealing with?  Some of them are horrors to deal with, others work all right.
This really depends on the size of your application. Hand-crafted Data Access Layers make the most sense for a very small application as you have ultimate control but for any medium to large size application I would recommend a code generator. I&#39;ve had various experience with APEX SQL (not great), LINQ and Subsonic (both very good). I&#39;m just about to evaluate a Telerik ORM shortly but I imagine that will be pretty good also. 
If you use .Net use Linq, then it is easy to maintain. LinqToSql makes it easy to update your data model with out having to change the code a whole lot.
I like code generators with custom templates for the following reasons:
   Reduces coding effort
   Easy to make global changes
   Embed architecture in templates ensures developer compliance.
   Less chance of coding errors.
   Consistent functionality
   Less to test.

In fact, using code generators I was able to create, or recreate, the store procedures, entity classes, and DAL from a modified database with 60+ tables in minutes when the schema was updated.  By using custom templates, I was ensured that the all layers worked with my naming rules and ensured proper error handling and prevention of double insertion.

Great for fixed price contracts.  If it is hourly, then you might want to do it by hand :-)
They are useful if you view your users as data entry clerks to maintain your database tables for you. They help minimize the programming time required to meet minimum requirements.

If you want the quality of your work to reflect something better than that, the best that can be said for them is they might give you a jumpstart if you&#39;re not too sure how to do simple consistent UI screens yourself.

Personally I find that refactoring them into something useful and attractive based on real Use Cases takes longer than doing it from scratch. They&#39;re the kind of technique Dilbert&#39;s pointy-haired boss would love.
Frameworks are choice one, if I need to use a code generator I like to throw together a quick Perl script that generates the code so I understand exactly what is getting generated and why.
I find a good framework for CRUD logic better than code generators.  I have run into situations when a complex set of tables generated a terribly slow query to produce the result.