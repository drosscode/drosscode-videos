I&#39;m going to implement something similar to Launchpad&#39;s translation platform this year: 
[https://launchpad.net/+tour/translation][1]

In a nutshell:

  - Concurrent translation
  - Phrase suggestions based on previously-entered phrases
  - Policies, e.g. Partly restricted and structured: anyone can suggest translations, while trusted community members review and approve new work

**UPDATE**

Of course, this builds on top of ResourceBundle etc, but is a nice way to manage all them strings ;-)


  [1]: https://launchpad.net/+tour/translation
This may be naive, but what about storing them in a database, either embedded or external?  This might simplify management, and changing languages more configurable.
JSR 296 Swing Application Framework has support for resource management (and it looks like will be part of Java 7).  SAF aims to pre-build parts of a Swing app that many people frequently need while encapsulating best practices.  You probably don&#39;t want to tie to it directly but its worth taking a look at what they do to see whether it gives you some ideas.  If I recall, they use cascading resource bundles with well-defined naming conventions.  The latter means you know where to look and the former means that you can reuse properties across some portion of your package hierarchy.

Many [JSR 296 resources collected here][1].

  [1]: http://tech.puredanger.com/java7#jsr296
What makes you think you have to have a separate properties file for every class? Generally you only need a few (or just one!) properties file (per language, of course).

Just call [`ResourceBundle.getBundle()`][1] with appropriate parameters - you can use the same bundle from multiple classes.

EDIT: Having one set of property files per dialog etc makes it easier to see where any particular string is coming from, but it makes it harder to reuse the same messages etc. Quite where the right balance is will depend on the application.

  [1]: http://java.sun.com/javase/6/docs/api/java/util/ResourceBundle.html