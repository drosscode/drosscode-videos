I&#39;d recommend looking at the [chapter on server configuration in the subversion book][1]. It makes suggestions about which configuration is more appropriate for your use.

For what it&#39;s worth, setting up a repository using the stand alone svn daemon is very straight forward. The annoying thing is managing user rights.


  [1]: http://svnbook.red-bean.com/en/1.5/svn.serverconfig.choosing.html
One of the popular access methods to Subversion is via Apache module. You can set put different rights at the directory level to control access. See [Choosing a Server Configuration][1] and [httpd, the Apache HTTP Server][2]. For authentication, I recommend using external authentication source like Microsoft AD via [`mod_auth_sspi`][3].

If you need to mix and match rights, see my answer for [How can I make only some folders show up for certain developers with SVN][4].


  [1]: http://svnbook.red-bean.com/en/1.5/svn.serverconfig.choosing.html
  [2]: http://svnbook.red-bean.com/en/1.5/svn.serverconfig.httpd.html
  [3]: http://sourceforge.net/projects/mod-auth-sspi/
  [4]: https://stackoverflow.com/questions/335039/how-can-i-make-only-some-folders-show-up-for-certain-developers-with-svn#336312
I work for an IT operations infrastructure automation company; we do this all the time. 

Location of repository: We use &quot;/srv/svn&quot; by default to store all SVN repositories, unless a customer has a specific requirement, for example an existing repository might be stored on a ReadyNAS shared filesystem.

Accounts: All our customers use LDAP. Either OpenLDAP server running on a master host, but sometimes Active Directory because some customers have a Windows domain in their office, which we can configure as well. Developers get access to the &quot;SCM&quot; group (usually svn, git or devel), and the &#39;deploy&#39; group. These groups only have permissions to log in and perform SCM related activities (ie, write commits to the repo based on group ownership), or do application deployments to production.

Backup procedures: We use svnadmin hotcopy unless the customer already has something in place (usually svnadmin dump, heh).

    svnadmin hotcopy /srv/svn /srv/svn_backups/$(date +%Y%m%d)

For access to the repo, it&#39;s usually simple svn+ssh. Some customers already have an Apache setup, but not many. I recommend SSH. Developers push their public ssh keys out and all is well. There&#39;s little to no maintenance with LDAP user management (the **only** way to go).
I have a [blog posting][1] that describes the steps necessary to set up and initiate a Linux-based Subversion server in order to maintain code repositories etc.

Basically the steps are:

1. [Download][2] the Subversion tarball.
2. Unzip and install Subversion.
3. Deal with any installation problems that arise when running &lt;code&gt;./configure&lt;/code&gt;, if any.
4. Create the Subversion repository using &lt;code&gt;svnadmin create&lt;/code&gt;.
5. Edit the repository configuration file using your text editor of choice.
6. Ditto the password file.
7. Import your code, projects etc into the repository using &lt;code&gt;svn import&lt;/code&gt;.
8. Start the server as a daemon eg &lt;code&gt;svnserve -d&lt;/code&gt;. It is also possible to get it to do this automatically
upon reboot.
9. Start using it using standard Subversion commands to eg check out, check in, backup etc...


  [1]: http://www.technical-recipes.com/2011/how-to-set-up-a-linux-based-subversion-svn-server/
  [2]: http://linux.softpedia.com/progDownload/Subversion-Download-3007.html