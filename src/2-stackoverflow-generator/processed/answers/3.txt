You are looking for a &#39;[code beautifier][1]&#39;. [Uncrustify][2]&#39;s a free one.

You only have to be able to describe your coding style in its configuration file, and it&#39;ll make sure every file fits the described style. 

  [1]: http://google.com/search?q=c+code+beautifier
  [2]: http://uncrustify.sourceforge.net/
I would argue against using a formal tool here. The best enforcement of coding standards is peer pressure. Peer pressure and mutual respect between team members are key elements of that team building environment....no different that the good natured harassing that is necessary when somebody inadvertently &quot;breaks the build&quot;, etc.

Review of newer team members&#39; code is a key part of the learning process and integrating into the team and learning the coding standards, etc. If the coding standard is too complicated or subtle to be picked up in this way, then instead of looking for a tool to validate the standard, you should be lookng for a new coding standard.

There are (or were) numerous tools for this.  One of the oldest is `cb` (C Beautifier) that was around in ancient versions of Unix - meaning, in this case, Version 7 Unix:

    CB ( 1 ) UNIX Programmer’s Manual CB ( 1 )

    NAME
        cb – C program beautifier
    SYNOPSIS
        cb
    DESCRIPTION
       Cb places a copy of the C program from the standard input on the standard
       output with spacing and indentation that displays the structure of the
       program.
    BUGS

GNU `indent` is a vastly more complex and configurable beastie.  There were commercial tools as well.  For example, [Abraxas Software][1] provides a CodeCheck tool, for example; we used that briefly in the mid-90s, but the changes it wanted us to make were (very necessary, but) too intrusive for management.


  [1]: http://www.abxsoft.com/
[AStyle][1] does what you want:

&gt; Artistic Style is a source code indenter, formatter, and beautifier for the C, C++, C#  and Java programming languages.

There&#39;s an [AStyle Plugin][2] available for Eclipse.

Eclipse also has a code formatter, but I&#39;m not sure if it works in CDT.


  [1]: http://astyle.sourceforge.net/
  [2]: http://astyleclipse.sourceforge.net/
The traditional beautifier [indent][2], available on every Unix machine. The version found on some is [GNU indent][1], which can be compiled and installed on every machine. GNU indent can read a set of rules from the file `~/.indent.pro`, for instance:

    --original --dont-format-first-column-comments --no-blank-lines-after-commas --parameter-indentation 8 --indent-level 8 --line-length 85 --no-space-after-parentheses --no-comment-delimiters-on-blank-lines 

So, just running indent before commiting guarantees uniformity of the presentation. If you want to **enforce** it, define a pre-commit hook in the Version Control System you use, which will run indent and refuse the commit if the committed version differs from what indent produces.

[1]: http://www.gnu.org/software/indent/
[2]: http://en.wikipedia.org/wiki/Indent_(Unix)
From a similar question: [Vera++][1]: 

&gt; Vera++ is a programmable tool for verification, analysis and
&gt; transformation of C++ source code.
&gt; 
&gt; The main usage scenarios that are foreseen for Vera++ are:
&gt; 
&gt; Ensure that the source code complies with the given coding standards
&gt; and conventions. 
&gt;
&gt; Provide source code metrics and statistics. 
&gt;
&gt; Perform automated transformations of the source code, which can range from pretty-printing to diagnostics to fault injection and advanced testing.


  [1]: https://bitbucket.org/verateam/vera/wiki/Home

Please use VIM and enjoy the easiness.
You can do anything related to source programming by simple commands.
Also you can make the VIM more reliable and powerful by editing .vimrc file.
The help in it will help you a lot.

/renjith g
Try [UniversalIndentGUI][1], which is a GUI wrapper around popular indenters/beautifiers such as Uncrustify, Artistic Style, and GNU Indent. Its GUI and live preview function make it very easy to try different indenters, and once you&#39;ve found an indenter and config you like, you can export the config or even export a shell script. Great if you&#39;re still trying things out.


  [1]: http://universalindent.sourceforge.net/
You can use `clang-format`. More information can be found at official site:
http://clang.llvm.org/docs/ClangFormat.html