Something like this:

	public static bool CompareLists(List&lt;int&gt; l1, List&lt;int&gt; l2)
	{
		if (l1 == l2) return true;
		if (l1.Count != l2.Count) return false;
		for (int i=0; i&lt;l1.Count; i++)
			if (l1[i] != l2[i]) return false;
		return true;
	}


Some additional error checking (e.g. null-checks) might be required.
Something like this maybe using Match Action.

    public static CompareList&lt;T&gt;(IList&lt;T&gt; obj1, IList&lt;T&gt; obj2, Action&lt;T,T&gt; match)
    {
       if (obj1.Count != obj2.Count) return false;
       for (int i = 0; i &lt; obj1.Count; i++)
       {
         if (obj2[i] != null &amp;&amp; !match(obj1[i], obj2[i]))
           return false;
       }
    }
Here are the steps I would do:

1. Do an object.ReferenceEquals() if true, then return true.
2. Check the count, if not the same, return false.
3. Compare the elements one by one.

Here are some suggestions for the method:

1. Base the implementation on ICollection&lt;T&gt;.  This gives you the count, but doesn&#39;t restrict to specific collection type or contained type.
2. You can implement the method as an extension method to ICollection&lt;T&gt;.
3. You will need to use the .Equals() for comparing the elements of the list.

From 3.5 onwards you may use a LINQ function for this:

    List&lt;string&gt; l1 = new List&lt;string&gt; {&quot;Hello&quot;, &quot;World&quot;,&quot;How&quot;,&quot;Are&quot;,&quot;You&quot;};
    List&lt;string&gt; l2 = new List&lt;string&gt; {&quot;Hello&quot;,&quot;World&quot;,&quot;How&quot;,&quot;Are&quot;,&quot;You&quot;};
    Console.WriteLine(l1.SequenceEqual(l2));

It also knows an overload to provide your own comparer
Assuming you mean that you want to know if the CONTENTS are equal (not just the list&#39;s object reference.)

If you will be doing the equality check much more often than inserts then you may find it more efficient to generate a hashcode each time a value is inserted and compare hashcodes when doing the equality check.  Note that you should consider if order is important or just that the lists have identical contents in any order.

Unless you are comparing very often I think this would usually be a waste.
One shortcut, that I didn&#39;t see mentioned, is that if you know how the lists were created, you may be able to join them into strings and compare directly.

For example... 

In my case, I wanted to prompt the user for a list of words.  I wanted to make sure that each word started with a letter, but after that, it could contain letters, numbers, or underscores.  I&#39;m particularly concerned that users will use dashes or start with numbers.

I use Regular Expressions to break it into 2 lists, and them join them back together and compare them as strings:

        var testList = userInput.match(/[-|\w]+/g)  
            /*the above catches common errors: 
             using dash or starting with a numeric*/
        listToUse = userInput.match(/[a-zA-Z]\w*/g)
         
        if (listToUse.join(&quot; &quot;) != testList.join(&quot; &quot;)) {
                    return &quot;the lists don&#39;t match&quot;

Since I knew that neither list would contain spaces, and that the lists only contained simple strings, I could join them together with a space, and compare them.
