The best version is certainly to use the builtin way:

    string Tabs(int len) { return new string(&#39;\t&#39;, len); }

Of the other solutions, prefer the easiest; only if this is proving too slow, strive for a more efficient solution.

&lt;del&gt;If you use a `StringBuilder` and know its resulting length in advance, then also use an appropriate constructor, this is much more efficient because it means that only one time-consuming allocation takes place, and no unnecessary copying of data.&lt;/del&gt;
&lt;ins&gt;Nonsense: of course the above code is more efficient.&lt;/ins&gt;
What about this:

    string tabs = new string(&#39;\t&#39;, n);
Where `n` is the number of times you want to repeat the string.

Or better:

    static string Tabs(int n)
    {
        return new string(&#39;\t&#39;, n);
    }


Use an extension method:

----------

    public static class StringExtensions
    {
       public static string Repeat(this char chatToRepeat, int repeat) {

           return new string(chatToRepeat, repeat);
       }

       public  static string Repeat(this string stringToRepeat, int repeat)
       {
           var builder = new StringBuilder(repeat*stringToRepeat.Length);
           for (int i = 0; i &lt; repeat; i++) {
               builder.Append(stringToRepeat);
           }
           return builder.ToString();
       }
    }

----------

You could then write:

    Debug.WriteLine(&#39;-&#39;.Repeat(100)); // For Chars
    Debug.WriteLine(&quot;Hello&quot;.Repeat(100)); // For Strings

Note that a performance test of using the StringBuilder version for simple characters instead of strings gives you a major performance penality:

On my computer the difference in measured performance is 1:20 between:

    Debug.WriteLine(&#39;-&#39;.Repeat(1000000)) // Char version

and

    Debug.WriteLine(&quot;-&quot;.Repeat(1000000)) // String version



In all versions of .NET, you can repeat a string thus:

    public static string Repeat(string value, int count)
    {
        return new StringBuilder(value.Length * count).Insert(0, value, count).ToString();
    }

To repeat a character, `new String(&#39;\t&#39;, count)` is your best bet. See [the answer by @CMS](https://stackoverflow.com/a/411762).
The answer really depends on the complexity you want. For example, I want to outline all my indents with a vertical bar, so my indent string is determined as follows:

    return new string(Enumerable.Range(0, indentSize*indent).Select(
      n =&gt; n%4 == 0 ? &#39;|&#39; : &#39; &#39;).ToArray());

    var str = new string(Enumerable.Repeat(&#39;\t&#39;, numTabs).ToArray());
There is a simple way to repeat a string that even works in .NET 2.0.

To repeat a string:

    string repeated = new String(&#39;+&#39;, 3).Replace(&quot;+&quot;, &quot;Hello, &quot;);
Returns

&gt;&quot;Hello, Hello, Hello, &quot;

To repeat a string as an array:

    // Two line version.
    string repeated = new String(&#39;+&#39;, 3).Replace(&quot;+&quot;, &quot;Hello,&quot;);
    string[] repeatedArray = repeated.Split(&#39;,&#39;);

    // One line version.
    string[] repeatedArray = new String(&#39;+&#39;, 3).Replace(&quot;+&quot;, &quot;Hello,&quot;).Split(&#39;,&#39;);
Returns

&gt;{&quot;Hello&quot;, &quot;Hello&quot;, &quot;Hello&quot;, &quot;&quot;}

Keep it simple.


    string.Concat(Enumerable.Repeat(&quot;ab&quot;, 2));

Returns

&gt; &quot;abab&quot;

And

    string.Concat(Enumerable.Repeat(&quot;a&quot;, 2));

Returns

&gt; &quot;aa&quot;



from...

https://stackoverflow.com/questions/4115064/is-there-a-built-in-function-to-repeat-string-or-char-in-net


Using ``String.Concat`` and ``Enumerable.Repeat`` which will be less expensive
than using ``String.Join``
    
    public static Repeat(this String pattern, int count)
    {
        return String.Concat(Enumerable.Repeat(pattern, count));
    }

Let&#39;s say you want to repeat &#39;\t&#39; n number of times, you can use;

    String.Empty.PadRight(n,&#39;\t&#39;)

Extension methods:        

    public static string Repeat(this string s, int n)
    {
        return new String(Enumerable.Range(0, n).SelectMany(x =&gt; s).ToArray());
    }

    public static string Repeat(this char c, int n)
    {
        return new String(c, n);
    }
Your first example which uses `Enumerable.Repeat`:

    private string Tabs(uint numTabs)
    {
        IEnumerable&lt;string&gt; tabs = Enumerable.Repeat(
                                     &quot;\t&quot;, (int) numTabs);
        return (numTabs &gt; 0) ? 
                tabs.Aggregate((sum, next) =&gt; sum + next) : &quot;&quot;; 
    } 

can be rewritten more compactly with `String.Concat`:

    private string Tabs(uint numTabs)
    {		
        return String.Concat(Enumerable.Repeat(&quot;\t&quot;, (int) numTabs));
    }
How about this:
        
    //Repeats a character specified number of times
    public static string Repeat(char character,int numberOfIterations)
    {
        return &quot;&quot;.PadLeft(numberOfIterations, character);
    }

    //Call the Repeat method
    Console.WriteLine(Repeat(&#39;\t&#39;,40));

Try this:

1. Add the `Microsoft.VisualBasic` reference
2. Use: `String result = Microsoft.VisualBasic.Strings.StrDup(5, &quot;hi&quot;);`


And yet another method 

    new System.Text.StringBuilder().Append(&#39;\t&#39;, 100).ToString()
You can create an extension method

    static class MyExtensions
    {
        internal static string Repeat(this char c, int n)
        {
            return new string(c, n);
        }
    }

Then you can use it like this

    Console.WriteLine(&#39;\t&#39;.Repeat(10));
For me this is fine:

    public static class Utils
    {
        public static string LeftZerosFormatter(int zeros, int val)
        {
            string valstr = val.ToString();

            valstr = new string(&#39;0&#39;, zeros) + valstr;

            return valstr.Substring(valstr.Length - zeros, zeros);
        }
    }

Without a doubt the accepted answer is the best and fastest way to repeat a single character.

Binoj Anthony&#39;s answer is a simple and quite efficient way to repeat a string.

However, if you don&#39;t mind a little more code, you can use my array fill technique to efficiently create these strings even faster.  In my comparison tests, the code below executed in about 35% of the time of the StringBuilder.Insert code. 

    public static string Repeat(this string value, int count)
    {
        var values = new char[count * value.Length];
        values.Fill(value.ToCharArray());
        return new string(values);
    }

    public static void Fill&lt;T&gt;(this T[] destinationArray, params T[] value)
    {
        if (destinationArray == null)
        {
            throw new ArgumentNullException(&quot;destinationArray&quot;);
        }

        if (value.Length &gt; destinationArray.Length)
        {
            throw new ArgumentException(&quot;Length of value array must not be more than length of destination&quot;);
        }

        // set the initial array value
        Array.Copy(value, destinationArray, value.Length);

        int copyLength, nextCopyLength;

        for (copyLength = value.Length; (nextCopyLength = copyLength &lt;&lt; 1) &lt; destinationArray.Length; copyLength = nextCopyLength)
        {
            Array.Copy(destinationArray, 0, destinationArray, copyLength, copyLength);
        }

        Array.Copy(destinationArray, 0, destinationArray, copyLength, destinationArray.Length - copyLength);
    }

For more about this array fill technique, see https://stackoverflow.com/questions/5943850/fastest-way-to-fill-an-array-with-a-single-value/22867582#22867582

Albeit very similar to a previous suggestion, I like to keep it simple and apply the following:

    string MyFancyString = &quot;*&quot;;
    int strLength = 50;
    System.Console.WriteLine(MyFancyString.PadRight(strLength, &quot;*&quot;);

It is standard .NET, really.


    string input = &quot;abc&quot;
    string output = &quot;&quot;;
    for (int i = 0; i &lt; input.Length; i++)
    {
        output += input[i].ToString() + input[i].ToString();
    }
    Console.WriteLine(output);

Output:

```lang-none
=aabbcc
```

Fill the screen with 6,435 z&#39;s:

    $str = [System.Linq.Enumerable]::Repeat([string]::new(&quot;z&quot;, 143), 45)

    $str
