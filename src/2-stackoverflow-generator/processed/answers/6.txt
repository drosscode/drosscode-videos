If you&#39;re looking to test GWT widgets in isolation, there aren&#39;t many options.  You can use a GWTTestCase to instantiate your widgets and test it through its API, which is what Google does for the GWT widgets themselves: [Source for RadioButtonTest][1]

However, the event-firing mechanism doesn&#39;t work in GWTTestCases, which means you can&#39;t do things like programmatically click a button and expect some onClick() callback method to be invoked on a listener.  It also is hard if not impossible to get at the underlying DOM, so it may not be the best tool for testing low-level HTML-emitting code.

It sounds like you are following all the right steps; Rob&#39;s article provides an excellent description of how to write testable code using the Model-View-Presenter (MVP) design pattern.  The more logic you keep out of the view layer, the better.  When that&#39;s not possible, use a tool like Selenium to create focused tests of dynamic UI behavior.

I followed a similar strategy - MVP with minimal code in the widgets.  In a few cases I did write some code which would wrap the Grid class, so I was able to instantiate my component in a GWTTestCase, pass it a Grid, invoke some methods on my component, and check the state of the Grid.  I wrote an article for Better Software about Test-First GWT, which you can read [on my blog][2].  

If you&#39;re looking to test code that uses non-UI GWT classes (such as URL encoding or Dictionaries), you&#39;ll need to use GWTTestCase, or else follow similar wrapping strategies until the code is too simple to break.  Then use an integration test with a tool like Selenium, or a few targeted GWTTestCases which only test that you&#39;re using the library correctly -- as J.B. Rainsberger says, &quot;Don&#39;t test the framework!&quot;

  [1]: https://gwt.googlesource.com/gwt/+/master/user/test/com/google/gwt/user/client/ui/RadioButtonTest.java &quot;Source for RadioButtonTest&quot;
  [2]: http://blog.danielwellman.com/2008/11/test-first-gwt-article-in-november-2008-better-software-magazine.html &quot;Test FIrst GWT Article&quot;
What worked for me:

Use classical model/view/controller (e.g. no business logic in the view or controller; controllers only translate view events into method calls on the model).

Decouple the model and controller code from the GWT view widgets and any other classes that rely on GWT and can&#39;t be instantiated in a plain old JVM.  You can then test them with good old JUnit.

Write end-to-end tests to test the system through the GUI to ensure that the models and controllers are hooked up to the views correctly.  We found it faster to deploy and start up the app and then interact with it through a browser controlled from JUnit with WebDriver than to use GWTTestCase!

Use JMock to test asynchronous calls like this: http://www.jmock.org/gwt.html.
Also have a read at [Testing Methodologies Using Google Web Toolkit][1]


  [1]: http://code.google.com/webtoolkit/articles/testing_methodologies_using_gwt.html
As an alernative, you should try [gwt-test-utils][1], which manage to run GWT client code in a standalone JVM and provides some feature to Mock anything you want (component, RPC services, etc..)


  [1]: http://code.google.com/p/gwt-test-utils/