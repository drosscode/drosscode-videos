This is a [nice solution](http://henrik.nyh.se/2008/11/rails-jquery-sortables) if you are using jQuery.

From the linked blog:
&gt; I just wrote some sortable code for a Rails/jQuery app and figured I would blog just how little code it takes, and also the single MySQL query I used on the backend.
Here&#39;s my solution that is based on the article mentioned by Silviu. I&#39;m sorting parts that belong_to lessons, hence the inclusion of the lessonID.

This is in the view - I&#39;m using HAML so you&#39;ll have to convert to erb.

    #sorter
    - @lesson.parts.each do |part|
      %div[part] &lt;- HAML rocks - this constructs a div &lt;div id=&quot;the_part_id&quot; class=&quot;part&quot;&gt;
        = part_screenshot part, :tiny
        = part.swf_asset.filename

The js looks like this:

        $(&#39;#sorter&#39;).sortable({items:&#39;.part&#39;, containment:&#39;parent&#39;, axis:&#39;y&#39;, update: function() {
      $.post(&#39;/admin/lessons/&#39; + LessonId + &#39;/parts/sort&#39;, &#39;_method=post&amp;authenticity_token=&#39;+ AUTH_TOKEN+&#39;&amp;&#39;+$(this).sortable(&#39;serialize&#39;));
      $(&#39;#sorter&#39;).effect(&quot;highlight&quot;);
    }});

and here is the method that is called in the PartsController:

    def sort
    load_lesson
    part_positions = params[:part].to_a
    @parts.each_with_index do |part, i|
      part.position = part_positions.index(part.id.to_s) + 1
      part.save
    end
    render :text =&gt; &#39;ok&#39;
  end

    def load_lesson
    @lesson = Lesson.find(params[:lesson_id])
    @parts = @lesson.parts
  end


It needs some work on giving feedback to the user, but does the trick for me.



