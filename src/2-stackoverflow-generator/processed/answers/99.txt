There is an [RFC][1] for everything! - *[Randomness Requirements for Security][2]* (RFC 4086).

You can also spend some big bucks on hardware to create a random seed. I think a [Geiger counter][3] is the standard for professional solutions. Most poker sites uses this nowadays.

  [1]: http://en.wikipedia.org/wiki/Request_for_Comments
  [2]: http://www.ietf.org/rfc/rfc4086.txt
  [3]: http://en.wikipedia.org/wiki/Geiger_counter

There is nothing wrong with it -- it&#39;s good enough to generate simple passwords. A simple example ([source][1]):

    Random RandomClass = new Random();
    int RandomNumber = RandomClass.Next(); // Random number between 1 and 2147483647
    double RandomNumber = RandomClass.Next(1,10); // Random number between 1 and 10
    
    double RandomDouble = RandomClass.NextDouble(); // Random double between 0.0 and 1.0

The article *[How To: Generate a Random Password (C#/VB.NET)][2]* has a very comprehensive example of generating good, easy-to-read passwords with specified complexity. It may be overkill for you, but it might provide a nice source to copy ideas from.

---------------------------

If you need something more for cryptography, there&#39;s another namespace for that:

    System.Security.Cryptography

Specifically, you can use this:

    System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(yourByte)

An example is *[Using Crypto for your Random Numbers in VB.NET][3]*, and another one is *[Crypto Random Numbers][4]*.

If you&#39;re thinking about rolling your own, the site *[Developer Guidance Share][5]* has some information to talk you out of it.

  [1]: https://web.archive.org/web/20110926062531/http://authors.aspalliance.com:80/brettb/RandomNumbersInCSharp.asp
  [2]: https://web.archive.org/web/20190315160013/http://www.obviex.com:80/samples/password.aspx
  [3]: https://web.archive.org/web/20170919103531/http://geekswithblogs.net/cwilliams/archive/2005/10/16/57141.aspx
  [4]: https://web.archive.org/web/20110828061505/http://weblogs.asp.net:80/dbright/archive/2003/10/16/32305.aspx
  [5]: https://www.guidanceshare.com/wiki/.NET_Framework_2.0_Security_Inspection_Questions_-_Cryptography
If you&#39;re after some details on how to make `System.Random` work for you this [CodeBetter][1] article is well worth reading.  He gives a good overview of what the Random function is doing and how to make it &#39;more random&#39; using a hashed GUID as the seed. If you just need to generate random initial passwords for user accounts (I&#39;m assuming here) then this should be more than sufficient, the cryptography tools would probably be overkill in this case.


  [1]: http://codebetter.com/blogs/brendan.tompkins/archive/2005/03/09/59496.aspx
System.Random is *not* as &quot;cryptographically strong&quot; source of randomness.  The output of the Random function is entirely predictable assuming the attacker knows (or can guess) the &quot;seed&quot; value that was used to create the System.Random.  If you simply call new System.Random() that initial value is simply a representation of the current system time (something that an attacker can often guess very easily).  

Even if the initial time is not exactly known, an attacker can check all of the potential values in a given time range by brute force.

The random generators in the System.Security.Cryptography namespace are designed for use in this kind of situation and gain their unpredictability from a number of much more secure sources.
