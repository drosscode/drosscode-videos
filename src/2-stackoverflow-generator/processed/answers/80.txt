    use strict;
    use warnings;
    my ($sec,$min,$hour,$day,$month,$year)=localtime();
    $year+=1900;
    $month+=1;
    $today_time = sprintf(&quot;%02d-%02d-%04d %02d:%02d:%02d&quot;,$day,$month,$year,$hour,$min,$sec);
    print $today_time;

That&#39;s what I&#39;d do ...

    #!/usr/bin/perl
    use Date::Parse;
    use POSIX;
    
    $orig = &quot;20090103 12:00&quot;;
    
    print strftime(&quot;%Y%m%d %R&quot;, localtime(str2time($orig, &#39;GMT&#39;)));

You can also use `Time::ParseDate` and `parsedate()` instead of `Date::Parse` and `str2time()`. Note that the de facto standard atm. seems to be DateTime (but you might not want to use OO syntax just to convert a timestamp).


Take your pick:

* [DateTime][1]::* (alternatively, at [datetime.perl.org][2])
* [Date::Manip][3]
* [Date::Calc][4] (last update in 2004)

There are a zillion others, no doubt, but they&#39;re probably the top contenders.


  [1]: http://search.cpan.org/perldoc?DateTime
  [2]: http://datetime.perl.org/
  [3]: http://search.cpan.org/perldoc?Date::Manip
  [4]: http://search.cpan.org/perldoc?Date::Calc
Because the Perl built in date handling interfaces are kind of clunky and you wind up passing around a half dozen variables, the better way is to use either [DateTime][1] or [Time::Piece][2].  DateTime is the all-singing, all-dancing Perl date object, and you&#39;ll probably eventually want to use it, but Time::Piece is simpler and perfectly adequate to this task, has the advantage of shipping with 5.10 and the technique is basically the same for both.

Here&#39;s the simple, flexible way using Time::Piece and [strptime][3].

    #!/usr/bin/perl
    
    use 5.10.0;
    
    use strict;
    use warnings;
    
    use Time::Piece;
    
    # Read the date from the command line.
    my $date = shift;

    # Parse the date using strptime(), which uses strftime() formats.
    my $time = Time::Piece-&gt;strptime($date, &quot;%Y%m%d %H:%M&quot;);

    # Here it is, parsed but still in GMT.
    say $time-&gt;datetime;

    # Create a localtime object for the same timestamp.
    $time = localtime($time-&gt;epoch);

    # And here it is localized.
    say $time-&gt;datetime;

And here&#39;s the by-hand way, for contrast.

Since the format is fixed, a regular expression will do just fine, but if the format changes you&#39;ll have to tweak the regex.

    my($year, $mon, $day, $hour, $min) = 
        $date =~ /^(\d{4}) (\d{2}) (\d{2})\ (\d{2}):(\d{2})$/x;

Then convert it to Unix epoch time (seconds since Jan 1st, 1970)

    use Time::Local;
    # Note that all the internal Perl date handling functions take month
    # from 0 and the year starting at 1900.  Blame C (or blame Larry for
    # parroting C).
    my $time = timegm(0, $min, $hour, $day, $mon - 1, $year - 1900);

And then back to your local time.

    (undef, $min, $hour, $day, $mon, $year) = localtime($time);

    my $local_date = sprintf &quot;%d%02d%02d %02d:%02d\n&quot;,
        $year + 1900, $mon + 1, $day, $hour, $min;


  [1]: http://search.cpan.org/perldoc?DateTime
  [2]: http://search.cpan.org/perldoc?Time::Piece
  [3]: http://opengroup.org/onlinepubs/007908799/xsh/strftime.html
Here&#39;s an example, using [DateTime][1] and its [strptime][2] format module.

    use DateTime;
    use DateTime::Format::Strptime;
    
    my $val = &quot;20090103 12:00&quot;;
    
    my $format = new DateTime::Format::Strptime(
                    pattern =&gt; &#39;%Y%m%d %H:%M&#39;,
                    time_zone =&gt; &#39;GMT&#39;,
                    );
    
    my $date = $format-&gt;parse_datetime($val);
    
    print $date-&gt;strftime(&quot;%Y%m%d %H:%M %Z&quot;).&quot;\n&quot;;
    
    $date-&gt;set_time_zone(&quot;America/New_York&quot;);  # or &quot;local&quot;
    
    print $date-&gt;strftime(&quot;%Y%m%d %H:%M %Z&quot;).&quot;\n&quot;;

    $ perl dates.pl
    20090103 12:00 UTC
    20090103 07:00 EST

&lt;hr&gt;
If you had wanted to parse localtime, here&#39;s how you&#39;d do it :) 

    use DateTime;
    
    my @time = (localtime);
    
    my $date = DateTime-&gt;new(year =&gt; $time[5]+1900, month =&gt; $time[4]+1,
                    day =&gt; $time[3], hour =&gt; $time[2], minute =&gt; $time[1],
                    second =&gt; $time[0], time_zone =&gt; &quot;America/New_York&quot;);
    
    print $date-&gt;strftime(&quot;%F %r %Z&quot;).&quot;\n&quot;;
    
    $date-&gt;set_time_zone(&quot;Europe/Prague&quot;);
    
    print $date-&gt;strftime(&quot;%F %r %Z&quot;).&quot;\n&quot;;


  [1]: http://datetime.perl.org
  [2]: http://search.cpan.org/dist/DateTime-Format-Strptime/lib/DateTime/Format/Strptime.pm