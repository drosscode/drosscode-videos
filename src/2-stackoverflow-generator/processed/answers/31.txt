Although it&#39;s not evident here, I believe the original poster did find an answer to his question by starting a thread ([available here][1]) in the iPhone Developer Forums (which I eventually had to find myself because the information wasn&#39;t shared here).

In case someone else has the same question and finds the page in the future, here&#39;s a helpful response that was posted by someone on the Apple forum called &quot;eskimo1&quot; (which I have edited slightly such that it is easier to read without having the context provided by the entire original thread):

 - Regarding iPhone app status terminology, &quot;active&quot; does not mean &quot;awake&quot;, it means &quot;attached to the GUI&quot;.  Think of it being analogous to &quot;frontmost&quot; in Mac OS X.  When you lock the device your app deactivates but the device may or may not go to sleep
 - iPhone OS rarely sleeps if the device is connected to main power (i.e., via USB). It can sleep if running on battery, however.
 - A short time after the screen is locked (20 seconds according to Oliver Drobnik), the device sleeps. This is like closing the lid on your laptop; all activity on the main CPU halts.
 - This does not happen if the device is playing audio in the right audio session.  See [DTS Q&amp;A QA1626 &quot;Audio Session - Ensuring audio playback continues when screen is locked&quot;][2] for details.
 - Note that the idleTimerDisabled property (which can be turned on to prevent the screen from turning off while the app is running) is about locking the screen after user inactivity. It&#39;s not directly related to system sleep (it&#39;s indirectly related in that the system may sleep shortly after it&#39;s locked).

  [1]: https://devforums.apple.com/message/23294#23294
  [2]: http://developer.apple.com/iphone/library/qa/qa2008/qa1626.html
I believe your application should run normally when suspended. (think Pandora Radio)

Check to see if your timer is being deallocated due to your view being hidden or some other event occurring.

My first advice is do not disable the idle timer, that is just a hack.  If you want to keep a timer alive during UI events run the timer on the current run loop using NSCommonModes:

    // create timer and add it to the current run loop using common modes

	self.timer = [NSTimer timerWithTimeInterval:.1 target:self selector:@selector(handleTimer) userInfo:nil repeats:YES];
	[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];


I was faced with this issue recently in an app I am working on that uses several timers and plays some audio prompts and made two relatively simple changes:

1. In the `AppDelegate` I implemented the following methods and there mere presence allows the app to continue when the screen is locked

        // this receives the notification when the device is locked
        - (void)applicationWillResignActive:(UIApplication *)application
        { 
        }
    
        // this receives the notification that the application is about to become active again
        - (void)applicationWillBecomeActive:(NSNotification *)aNotification
        {
        }

 references: [UIApplicationDelegate Protocol Reference][1] &amp; [NSApplication Class Reference][2] in the API doc (accessible via Xcode, just search for `applicationWillBecomeActive`).

2. Made the main `viewcontroller` class an `AVAudioPlayerDelegate` and used this code from Apple&#39;s &quot;AddMusic&quot; sample to make the audio alerts the app played mix nicely into the iPod audio etc...

 I just dropped this code into a method that is called during viewDidLoad. If this interests you, you fall into the &quot;who should read this doc&quot; category for this: [Audio Session Programming Guide][3]

        // Registers this class as the delegate of the audio session.
        [[AVAudioSession sharedInstance] setDelegate: self];
     
        // The AmbientSound category allows application audio to mix with Media Player
        // audio. The category also indicates that application audio should stop playing 
        // if the Ring/Siilent switch is set to &quot;silent&quot; or the screen locks.
        [[AVAudioSession sharedInstance] setCategory: AVAudioSessionCategoryAmbient error: nil];
     
        // Activates the audio session.
        NSError *activationError = nil;
        [[AVAudioSession sharedInstance] setActive: YES error: &amp;activationError];


  [1]: http://developer.apple.com/library/ios/#documentation/uikit/reference/UIApplicationDelegate_Protocol/Reference/Reference.html
  [2]: http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSApplication_Class/
  [3]: http://developer.apple.com/iPhone/library/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Introduction/Introduction.html
I used the information on this post for a small sample that I was building.   This is the code that I used when I initiated the playback to prevent the audio from stopping:

    AudioSession.Category = AudioSessionCategory.MediaPlayback;

And when the application is done with the playback to reset to the original value:

    AudioSession.Category = AudioSessionCategory.SoloAmbientSound;

The full sample is here:

http://github.com/migueldeicaza/monotouch-samples/tree/master/StreamingAudio/



See *Application Interruptions* in the *iPhone OS Programming Guide*, especially the `applicationWillResignActive` and `applicationDidBecomeActive` events. (The whole guide is certainly worth reading.) When You ignore the events, the timer seems to go on for a while and then stops. Sounds logical, the application could easily drain the battery if kept running. And what exactly happens to the application? I guess it simply does not get any CPU time – it freezes and only thaws when You turn the machine back “on.”