Kent has the correct answer, but I want to add a little tidbit on applying `INotifyPropertyChanged` interface.

To raise the event easily try this

    protected void OnPropertyChanged&lt;T&gt;(Expression&lt;Func&lt;T&gt;&gt; property)
    {
        if (this.PropertyChanged != null)
        {
            var mex = property.Body as MemberExpression;
            string name = mex.Member.Name;
            this.PropertyChanged(this, new PropertyChangedEventArgs(name));
        }
    }

and apply it like
    
    { // inside some method or property setter
        OnPropertyChanged(() =&gt; this.MyProperty);
    }

The only reason this is better than specifying the property by name, is that if you refactor, or just change the name of the property you won&#39;t have to manually change the implentation, but can let the compiler rename all the references automatically.


Your domain object should implement [INotifyPropertyChanged][1] so that the binding knows when the underlying property has changed.


  [1]: http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx