I am trying to write a static function to Or two expressions, but recieve the following error:

> The parameter 'item' is not in scope.
> 
> Description: An unhandled exception
> occurred during the execution of the
> current web request. Please review the
> stack trace for more information about
> the error and where it originated in
> the code. 
> 
> Exception Details:
> System.InvalidOperationException: The
> parameter 'item' is not in scope.


the method:


    public static Expression<Func<T, bool>> OrExpressions(Expression<Func<T, bool>> left, Expression<Func<T, bool>> right)
    {
        // Define the parameter to use
        var param = Expression.Parameter(typeof(T), "item");

        var filterExpression = Expression.Lambda<Func<T, bool>>
             (Expression.Or(
                 left.Body,
                 right.Body
              ), param);
        // Build the expression and return it
        return (filterExpression);
    }

**edit**: adding more info

The expressions being or'd are coming from the method below, which execute just fine.  if there is a better way to or the results I am all ears.  Also, I do not know how many are being or'd in advance.


    public static Expression<Func<T, bool>> FilterExpression(string filterBy, object Value, FilterBinaryExpression binaryExpression)
    {
        // Define the parameter to use
        var param = Expression.Parameter(typeof(T), "item");

        // Filter expression on the value
        switch (binaryExpression)
        {
            case FilterBinaryExpression.Equal:
                {
                    // Build an expression for "Is the parameter equal to the value" by employing reflection
                    var filterExpression = Expression.Lambda<Func<T, bool>>
                        (Expression.Equal(
                            Expression.Convert(Expression.Property(param, filterBy), typeof(TVal)),
                            Expression.Constant(Value)
                         ),
                        param);
                    // Build the expression and return it
                    return (filterExpression);
                }


**edit**: adding even more info

Alternatively, is there a better way to do an or?  Currently the .Where(constraint) works just fine where constraint is of type Expression<Func<T, bool>>.  How can i do where(constraint1 or constraint2) (to the constraint n'th)

Thanks in advance!
