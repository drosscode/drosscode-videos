Assume I have a database table with many names.  I'd like to "flex match" against these names.  I'm not sure if "flex match" is the proper term to use, but let's go with that for now.  There have been [similar](https://stackoverflow.com/questions/369755/how-do-i-do-a-fuzzy-match-of-company-names-in-mysql-with-php-for-auto-complete) [discussions](https://stackoverflow.com/questions/309479/how-to-find-best-fuzzy-match-for-a-string-in-a-large-string-database) on "fuzzy matching," but I'm not really interested in phonetic matching.  I'm interested in what I'd call ordered-subset-matching.

I would like it to work akin to QuickSilver (OSX) or Launchy (Windows).  Here are a few examples of matches for a given search string:

_mit_ ⇒ **M**assachusetts **I**nstitute of **T**echnology  
_ffox_ ⇒ **F**ire**fox**  
_osx_ ⇒ Mac **OS X**  
_ms_ ⇒ **M**icro**s**oft Corporation

My end goal is to have a web page with an auto-completing text field that's data driven from the server.  

I'm confident I'll get adequate results on the client side by combining features from [jQuery LiveUpdate](http://ejohn.org/blog/jquery-livesearch/) and/or [jQuery QuickSelect](http://github.com/dcparker/jquery_plugins/tree/master/quickselect).

Where I need help is in how to best handle the flex match on the server side against a large table.  I have some ideas in how to build my own custom index using the Quicksilver [scoring](http://code.google.com/p/blacktree-alchemy/source/browse/trunk/Crucible/Code/NSString_BLTRExtensions.m) [algorithm](http://orderedlist.com/demos/quicksilverjs/javascripts/quicksilver.js) and maybe some permutation index logic, but I'd rather not re-invent the wheel if something else if readily available.

**In summary:** _What is the best way to gain a fast flex match against a database table with many rows?_